generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String        @unique @default(uuid()) @db.Uuid
  role  UserRolesEnum
  email String        @unique
  name  String

  password String

  birthDate DateTime
  books     UserBookPivotTable[]

  @@map("user")
}

model Book {
  id            String   @unique @default(uuid()) @db.Uuid
  name          String   @unique
  redaction     String
  publishedDate DateTime

  authors       UserBookPivotTable[]
  genres        BookGenrePivotTable[]
  bookResources BookResource[]

  @@map("book")
}

model BookResource {
  id       String @unique @default(uuid()) @db.Uuid
  filePath String
  fileName String
  mimeType String
  size     Int

  bookId String @db.Uuid
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Genre {
  id    String                @unique @default(uuid()) @db.Uuid
  name  String                @unique
  books BookGenrePivotTable[]

  @@map("genre")
}

model BookGenrePivotTable {
  genreId String @db.Uuid
  bookId  String @db.Uuid

  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([genreId, bookId])
  @@map("book_genre_pivot_table")
}

model UserBookPivotTable {
  userId String @db.Uuid
  bookId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("user_book_pivot_table")
}

enum UserRolesEnum {
  admin
  user
}
